[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "n8n-web-scraper"
version = "1.0.0"
description = "AI-powered n8n documentation scraper and knowledge system"
authors = [{name = "n8n Web Scraper Team", email = "team@example.com"}]
readme = "README.md"
requires-python = ">=3.7"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]
dependencies = [
    # Core framework
    "fastapi>=0.68.0",
    "uvicorn[standard]>=0.15.0",
    # "streamlit>=1.0.0",  # Removed - replaced by Next.js frontend
    "pydantic>=1.8.0",
    # Web scraping
    "requests>=2.25.0",
    "beautifulsoup4>=4.9.0",
    "lxml>=4.6.0",
    # Vector database and AI
    "chromadb>=0.4.15",
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    # Data processing
    "pandas>=1.3.0",
    "numpy>=1.26.4",
    "PyYAML>=5.4.0",
    # System monitoring
    "psutil>=5.8.0",
    "plotly>=5.0.0"
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "pytest-timeout>=2.1.0",
    "pytest-benchmark>=4.0.0",
    "httpx>=0.24.0",
    "respx>=0.20.0",
    
    # Code Quality
    "ruff>=0.1.9",
    "black>=23.12.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    
    # Development Tools
    "pre-commit>=3.6.0",
    "commitizen>=3.13.0",
    "semantic-version>=2.10.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
    
    # Performance
    "locust>=2.17.0",
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
    
    # Type stubs
    "types-requests>=2.31.0",
    "types-PyYAML>=6.0.12",
    "types-redis>=4.6.0",
]

[project.scripts]
n8n-scraper = "n8n_scraper.cli.main:cli"
n8n-start = "scripts.start_system:main"
n8n-test = "scripts.run_tests:main"
n8n-check = "n8n_scraper.tools.system_check:main"

[project.urls]
Homepage = "https://github.com/your-org/n8n-web-scraper"
Repository = "https://github.com/your-org/n8n-web-scraper.git"
Documentation = "https://github.com/your-org/n8n-web-scraper/blob/main/README.md"
"Bug Tracker" = "https://github.com/your-org/n8n-web-scraper/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"n8n_scraper" = ["config/*.yaml", "config/*.json"]

[tool.ruff]
target-version = "py37"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'



[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    # "streamlit.*",  # Removed - replaced by Next.js frontend
    "plotly.*",
    "anthropic.*",
    "openai.*",
]
ignore_missing_imports = true

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
known_first_party = ["n8n_scraper"]
known_third_party = [
    "fastapi",
    # "streamlit",  # Removed - replaced by Next.js frontend
    "chromadb",
    "openai",
    "anthropic",
    "pytest",
]

[tool.bandit]
skips = ["B101", "B601"]
exclude_dirs = ["tests", "venv", ".venv"]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/__pycache__/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/n8n_scraper/__init__.py:__version__",
]
update_changelog_on_bump = true
changelog_file = "CHANGELOG.md"

[tool.semantic_release]
version_toml = "pyproject.toml:project.version"
changelog_file = "CHANGELOG.md"
upload_to_pypi = false
upload_to_release = true
build_command = "pip install build && python -m build"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/n8n_scraper",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "api: API tests",
    "web: Web interface tests",
    "scraper: Scraper tests",
    "database: Database tests",
    "performance: Performance tests",
    "security: Security tests",
    "external: Tests requiring external services",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "C90", # mccabe
    "T20", # flake8-print
    "DJ",  # flake8-django
    "RUF", # Ruff-specific rules
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "PLC", # pylint convention
    "PLE", # pylint error
    "PLR", # pylint refactor
    "PLW", # pylint warning
    "PIE", # flake8-pie
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "ARG002", # Unused method argument
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "PLR0915", # Too many statements
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = [
    "S101",   # Use of assert detected
    "ARG",    # Unused function args -> fixtures nevertheless are functionally relevant
    "FBT",    # Don't care about booleans as positional arguments in tests
    "PLR2004", # Magic value used in comparison
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["n8n_scraper"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"